As its name suggests, the primary interface to PyTorch is the Python programming language. While Python is a suitable and preferred
language for many scenarios requiring dynamism and ease of iteration, there are equally many situations where precisely
these properties of Python are unfavorable. One environment in which the latter often applies is production â€“ the land
of low latencies and strict deployment requirements. For production scenarios, C++ is very often the language of choice,
even if only to bind it into another language like Java, Rust or Go. The following paragraphs will outline the path
PyTorch provides to go from an existing Python model to a serialized representation that can be loaded and executed
purely from C++, with no dependency on Python.
